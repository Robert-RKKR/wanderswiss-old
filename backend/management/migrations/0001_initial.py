# Generated by Django 5.0.8 on 2024-08-15 16:34

import django.db.models.deletion
import uuid
import wanderswiss.base.validators.json_validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='GlobalSettingsModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this object. It is automatically generated and cannot be modified.', primary_key=True, serialize=False)),
                ('is_current', models.BooleanField(default=True, help_text='Indicates if these settings are the active ones used by the Capybara application. Only one set of settings can be active at a time.', unique=True, verbose_name='Current global settings')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date and time when the global settings was created. This timestamp is automatically set when the object is created.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The date and time when these global settings were last updated. This helps in tracking changes to settings over time.', verbose_name='Updated')),
                ('notification_level', models.IntegerField(choices=[(1, 'Critical'), (2, 'Error'), (3, 'Warning'), (4, 'Info'), (5, 'Debug')], default=4, help_text='The level of severity for actions that trigger notifications. For example, a high severity level might trigger notifications for critical issues, while a lower level might include warnings and informational messages.', verbose_name='Notification severity level')),
                ('logger_level', models.IntegerField(choices=[(1, 'Critical'), (2, 'Error'), (3, 'Warning'), (4, 'Info'), (5, 'Debug')], default=1, help_text='The level of severity for actions that are logged. This setting determines which events are recorded in the log files. A higher level might include only errors and critical issues, while a lower level might also include warnings and informational messages.', verbose_name='Logger severity level')),
                ('logger_db', models.BooleanField(default=False, help_text='Indicates whether log messages should be stored in the database. This can be useful for keeping a persistent log history.', verbose_name='Logger DB')),
                ('logger_cli', models.BooleanField(default=False, help_text='Indicates whether log messages should be displayed in the command-line interface (CLI) console. This can be useful for real-time monitoring and debugging.', verbose_name='Logger CLI')),
                ('logger_application_option', models.IntegerField(choices=[(0, 'None'), (1, 'Exclude'), (2, 'Include')], default=0, help_text='Determines whether applications should be excluded or included in logging.', verbose_name='Application Logging Option')),
                ('logger_application_exclusions', models.JSONField(blank=True, help_text='List of applications to be excluded from logging. Logger will work for all applications except those provided here.', null=True, validators=[wanderswiss.base.validators.json_validators.json_list_validator], verbose_name='Applications to Exclude from Logging')),
                ('logger_application_inclusions', models.JSONField(blank=True, help_text='List of applications to be included in logging. Logger will work only for these applications.', null=True, validators=[wanderswiss.base.validators.json_validators.json_list_validator], verbose_name='Applications to Include in Logging')),
                ('report_colors', models.JSONField(default=['#36a2eb', '#00bef1', '#00d6dc', '#2ae8b5', '#a0f48b', '#7978d2', '#9260ba', '#a3459b', '#ab2576', '#f37659', '#fa6e76', '#f867ab', '#a74573', '#e17aa7', '#9fadbd', '#3b4856', '#265e58', '#eee8a9', '#35837b', '#79fac5', '#39c08f', '#008a5d'], help_text='Xxx.', validators=[wanderswiss.base.validators.json_validators.json_list_validator], verbose_name='Reports colors')),
                ('report_html_template', models.TextField(default='\n{{ load_static|safe }}\n\n<!DOCTYPE html>\n<html lang="en">\n\n    <head>\n        <meta charset="UTF-8">\n        <title>{{ report_base_data.report_name }}</title>\n        <style>\n            body {\n                font-family: Arial, sans-serif;\n                margin: 0px;\n                padding: 0;\n            }\n\n            h1 {\n                color: #333;\n                border-bottom: 2px solid #666;\n                padding-bottom: 10px;\n            }\n\n            h2 {\n                color: #555;\n                margin-top: 30px;\n                border-bottom: 1px solid #ccc;\n                padding-bottom: 5px;\n            }\n\n            .section-3, .section-2, .section-1 {\n                display: flex;\n            }\n\n            .section-3 .char {\n                flex: 1 0 33%;\n                box-sizing: border-box;\n                padding: 5px;\n            }\n\n            .section-2 .char {\n                flex: 1 0 50%;\n                box-sizing: border-box;\n                padding: 5px;\n            }\n\n            .section-1 .char {\n                flex: 1 0 100%;\n                box-sizing: border-box;\n                padding: 5px;\n            }\n\n            svg {\n                width: 100%;\n                height: auto;\n                max-height: 100%;\n            }\n        </style>\n    </head>\n\n    <body>\n\n        <h1>Report: {{ report_base_data.report_name }}</h1>\n        <p>Description: {{ report_base_data.report_description }}</p>\n        <p>Date: {{ report_base_data.report_date }}</p>\n\n        {{ report_format|safe }}\n\n    </body>\n\n</html>\n', help_text='Xxx.', verbose_name='Report HTML base template')),
                ('collecting_system_data_interval', models.PositiveIntegerField(default=1, help_text='The interval in minutes at which system metrics should be collected.', verbose_name='Metrics Collection Interval')),
            ],
            options={
                'verbose_name': 'Global settings',
                'verbose_name_plural': 'Global settings',
                'permissions': (('read_write', 'Read and write access.'), ('read_only', 'Read only access')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date and time when the administrator account was initially created.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The date and time when the administrator account was last updated.', verbose_name='Updated')),
                ('is_root', models.BooleanField(default=False, help_text='Indicates if the account is a root account. Root accounts have the highest level of access and cannot be deleted or modified.', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the account is active. Inactive accounts have limited functionality and cannot perform most actions.', verbose_name='Active')),
                ('is_staff', models.BooleanField(default=False, help_text='Indicates if the user is part of the staff, which provides access to the administrative interface.', verbose_name='Staff status')),
                ('role', models.IntegerField(choices=[(1, 'Administrator'), (2, 'Author'), (3, 'User')], default=3, help_text='User role.', verbose_name='Role')),
                ('name', models.CharField(help_text='The unique name of the administrator used for login and identification.', max_length=64, unique=True, verbose_name='Name')),
                ('email', models.EmailField(help_text='The unique email address of the administrator used for communication and account recovery purposes.', max_length=255, unique=True, verbose_name='E-mail')),
                ('password_to_change', models.BooleanField(default=False, help_text='Indicates if the user is required to change their password upon next login.', verbose_name='Password change required')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'permissions': (('read_write', 'Read and write access.'), ('read_only', 'Read only access')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='UserSettingsModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this object. It is automatically generated and cannot be modified.', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date and time when the user settings was created. This timestamp is automatically set when the object is created.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The date and time when these user settings were last updated. This helps in tracking changes to settings over time.', verbose_name='Updated')),
                ('measurement_system', models.IntegerField(choices=[(1, 'International System'), (2, 'imperial system')], default=1, help_text='Xxx.', verbose_name='Measurement systems')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'verbose_name': 'User settings',
                'verbose_name_plural': 'User settings',
                'permissions': (('read_write', 'Read and write access.'), ('read_only', 'Read only access')),
                'default_permissions': (),
            },
        ),
    ]

# Generated by Django 5.0.7 on 2024-09-10 14:26

import django.db.models.deletion
import uuid
import wanderswiss.base.validators.base_validator
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('hiking', '0002_alter_multidaytrialtrialmodel_options_and_more'),
        ('infopedia', '0002_alter_articlemodel_ico_alter_categorymodel_ico_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this object. It is automatically generated and cannot be modified.', primary_key=True, serialize=False)),
                ('name', models.CharField(error_messages={'invalid': 'Enter a valid name. It must contain 3 to 64 digits, letters, or special characters -, _ or spaces.'}, help_text='Unique name for the object. Must be between 3 and 64 characters long, and can include letters, digits, spaces, or special characters such as -, _.', max_length=64, validators=[wanderswiss.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='Unique slug representation of the object. Generated automatically from the name.', max_length=128, verbose_name='Slug')),
                ('description', models.CharField(blank=True, error_messages={'invalid': 'Enter a valid description. It must contain 8 to 256 digits, letters, and special characters -, _, . or spaces.'}, help_text='Detailed description of the object. Must be between 8 and 256 characters long and can include letters, digits, spaces, and special characters -, _, .', max_length=256, null=True, validators=[wanderswiss.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.CharField(choices=[('fa-regular fa-user', 'Administrator'), ('bi bi-1-circle', 'Circle')], default='fa-regular fa-user', help_text='Graphical representation of the object. Default value is Administrator icon.', max_length=64, verbose_name='Object ico')),
                ('is_dynamic', models.BooleanField(default=False, help_text='Indicates if this device was dynamically created. Dynamic devices are often generated based on specific conditions or user input at runtime.', verbose_name='Is dynamic')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if the object is marked as deleted. Deleted objects are not removed from the database.', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Indicates if the object is a root object. Root objects cannot be deleted or modified.', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the object is active. Inactive objects have limited functionality and may not appear in queries.', verbose_name='Active')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date and time when the object was created. This timestamp is automatically set when the object is created.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The date and time when the object was last updated. This timestamp is automatically updated whenever the object is modified.', verbose_name='Updated')),
                ('countries', models.ManyToManyField(help_text='Countries through which the route passes.', limit_choices_to={'type': 5}, related_name='%(class)s_countries', to='infopedia.choicemodel', verbose_name='Countries')),
                ('regions', models.ManyToManyField(help_text='Regions through which the route passes.', limit_choices_to={'type': 6}, related_name='%(class)s_regions', to='infopedia.choicemodel', verbose_name='Regions')),
                ('route', models.ForeignKey(blank=True, help_text='The route that will be taken during this event.', null=True, on_delete=django.db.models.deletion.PROTECT, to='hiking.routemodel', verbose_name='Hiking Route')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['-created'],
                'permissions': (('read_write', 'Read and write access.'), ('read_only', 'Read only access')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='UserEventModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this object. It is automatically generated and cannot be modified.', primary_key=True, serialize=False)),
                ('participant_id', models.CharField(help_text='Unique ID assigned to the participant by the event organizer. This ID is specific to the walk event, used for tracking, communication, and identification. It ensures proper registration and identification of each participant throughout the event.', max_length=64, verbose_name='Event Participant Identification Number')),
                ('event', models.ForeignKey(help_text='The specific event this user is participating in. Ifthe event is deleted, this record will also be removed.', on_delete=django.db.models.deletion.CASCADE, to='hiking.eventmodel', verbose_name='Related Event')),
                ('user', models.ForeignKey(help_text='The participant (user) associated with this event. If the user is deleted, this record will also be removed.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Event Participant')),
            ],
            options={
                'verbose_name': 'BaseM2mModel',
                'verbose_name_plural': 'BaseM2mModels',
                'ordering': ['id'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='eventmodel',
            name='users',
            field=models.ManyToManyField(help_text='Users who are participating in this event, through multi-day trials or individual trials linked to this event.', through='hiking.UserEventModel', to=settings.AUTH_USER_MODEL, verbose_name='Event Participants'),
        ),
    ]

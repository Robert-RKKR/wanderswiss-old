# Generated by Django 5.0.8 on 2024-08-11 18:16

import django.db.models.deletion
import uuid
import wanderswiss.base.validators.base_validator
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('achievement', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MultiDayTrialModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this object. It is automatically generated and cannot be modified.', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if the object is marked as deleted. Deleted objects are not removed from the database.', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Indicates if the object is a root object. Root objects cannot be deleted or modified.', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the object is active. Inactive objects have limited functionality and may not appear in queries.', verbose_name='Active')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date and time when the object was created. This timestamp is automatically set when the object is created.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The date and time when the object was last updated. This timestamp is automatically updated whenever the object is modified.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'invalid': 'Enter a valid name. It must contain 3 to 64 digits, letters, or special characters -, _ or spaces.'}, help_text='Unique name for the object. Must be between 3 and 64 characters long, and can include letters, digits, spaces, or special characters such as -, _.', max_length=64, validators=[wanderswiss.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='Unique slug representation of the object. Generated automatically from the name.', max_length=128, verbose_name='Slug')),
                ('description', models.CharField(blank=True, error_messages={'invalid': 'Enter a valid description. It must contain 8 to 256 digits, letters, and special characters -, _, . or spaces.'}, help_text='Detailed description of the object. Must be between 8 and 256 characters long and can include letters, digits, spaces, and special characters -, _, .', max_length=256, null=True, validators=[wanderswiss.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='Graphical representation of the object. Default value is 1.', verbose_name='Object ico')),
                ('is_dynamic', models.BooleanField(default=False, help_text='Indicates if this device was dynamically created. Dynamic devices are often generated based on specific conditions or user input at runtime.', verbose_name='Is dynamic')),
                ('days', models.IntegerField(help_text='Number of days for the multi day trial.', verbose_name='Days')),
            ],
            options={
                'verbose_name': 'Multi day trial',
                'verbose_name_plural': 'Multi day trials',
                'ordering': ['-created'],
                'permissions': (('read_write', 'Read and write access.'), ('read_only', 'Read only access')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='TrialModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this object. It is automatically generated and cannot be modified.', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if the object is marked as deleted. Deleted objects are not removed from the database.', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Indicates if the object is a root object. Root objects cannot be deleted or modified.', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the object is active. Inactive objects have limited functionality and may not appear in queries.', verbose_name='Active')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date and time when the object was created. This timestamp is automatically set when the object is created.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The date and time when the object was last updated. This timestamp is automatically updated whenever the object is modified.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'invalid': 'Enter a valid name. It must contain 3 to 64 digits, letters, or special characters -, _ or spaces.'}, help_text='Unique name for the object. Must be between 3 and 64 characters long, and can include letters, digits, spaces, or special characters such as -, _.', max_length=64, validators=[wanderswiss.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='Unique slug representation of the object. Generated automatically from the name.', max_length=128, verbose_name='Slug')),
                ('description', models.CharField(blank=True, error_messages={'invalid': 'Enter a valid description. It must contain 8 to 256 digits, letters, and special characters -, _, . or spaces.'}, help_text='Detailed description of the object. Must be between 8 and 256 characters long and can include letters, digits, spaces, and special characters -, _, .', max_length=256, null=True, validators=[wanderswiss.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='Graphical representation of the object. Default value is 1.', verbose_name='Object ico')),
                ('is_dynamic', models.BooleanField(default=False, help_text='Indicates if this device was dynamically created. Dynamic devices are often generated based on specific conditions or user input at runtime.', verbose_name='Is dynamic')),
            ],
            options={
                'verbose_name': 'Trial',
                'verbose_name_plural': 'Trials',
                'ordering': ['-created'],
                'permissions': (('read_write', 'Read and write access.'), ('read_only', 'Read only access')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='RouteModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this object. It is automatically generated and cannot be modified.', primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if the object is marked as deleted. Deleted objects are not removed from the database.', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Indicates if the object is a root object. Root objects cannot be deleted or modified.', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the object is active. Inactive objects have limited functionality and may not appear in queries.', verbose_name='Active')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date and time when the object was created. This timestamp is automatically set when the object is created.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The date and time when the object was last updated. This timestamp is automatically updated whenever the object is modified.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'invalid': 'Enter a valid name. It must contain 3 to 64 digits, letters, or special characters -, _ or spaces.'}, help_text='Unique name for the object. Must be between 3 and 64 characters long, and can include letters, digits, spaces, or special characters such as -, _.', max_length=64, validators=[wanderswiss.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='Unique slug representation of the object. Generated automatically from the name.', max_length=128, verbose_name='Slug')),
                ('description', models.CharField(blank=True, error_messages={'invalid': 'Enter a valid description. It must contain 8 to 256 digits, letters, and special characters -, _, . or spaces.'}, help_text='Detailed description of the object. Must be between 8 and 256 characters long and can include letters, digits, spaces, and special characters -, _, .', max_length=256, null=True, validators=[wanderswiss.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='Graphical representation of the object. Default value is 1.', verbose_name='Object ico')),
                ('is_dynamic', models.BooleanField(default=False, help_text='Indicates if this device was dynamically created. Dynamic devices are often generated based on specific conditions or user input at runtime.', verbose_name='Is dynamic')),
                ('gps_data', models.TextField(help_text='GPS data in XML format.', verbose_name='GPS Data')),
                ('regions', models.IntegerField(choices=[(1101, 'Aargau'), (1102, 'Appenzell Ausserrhoden'), (1103, 'Appenzell Innerrhoden'), (1104, 'Basel-Landschaft'), (1105, 'Basel-Stadt'), (1106, 'Bern'), (1107, 'Fribourg'), (1108, 'Genève'), (1109, 'Glarus'), (1110, 'Graubünden'), (1111, 'Jura'), (1112, 'Luzern'), (1113, 'Neuchâtel'), (1114, 'Nidwalden'), (1115, 'Obwalden'), (1116, 'Schaffhausen'), (1117, 'Schwyz'), (1118, 'Solothurn'), (1119, 'St. Gallen'), (1120, 'Thurgau'), (1121, 'Ticino'), (1122, 'Uri'), (1123, 'Valais'), (1124, 'Vaud'), (1125, 'Zug'), (1126, 'Zürich'), (1201, 'Abruzzo'), (1202, 'Basilicata'), (1203, 'Calabria'), (1204, 'Campania'), (1205, 'Emilia-Romagna'), (1206, 'Friuli-Venezia Giulia'), (1207, 'Lazio'), (1208, 'Liguria'), (1209, 'Lombardia'), (1210, 'Marche'), (1211, 'Molise'), (1212, 'Piemonte'), (1213, 'Puglia'), (1214, 'Sardegna'), (1215, 'Sicilia'), (1216, 'Toscana'), (1217, 'Trentino-Alto Adige'), (1218, 'Umbria'), (1219, "Valle d'Aosta"), (1220, 'Veneto'), (1301, 'Baden-Württemberg'), (1302, 'Bayern'), (1303, 'Berlin'), (1304, 'Brandenburg'), (1305, 'Bremen'), (1306, 'Hamburg'), (1307, 'Hessen'), (1308, 'Mecklenburg-Vorpommern'), (1309, 'Niedersachsen'), (1310, 'Nordrhein-Westfalen'), (1311, 'Rheinland-Pfalz'), (1312, 'Saarland'), (1313, 'Sachsen'), (1314, 'Sachsen-Anhalt'), (1315, 'Schleswig-Holstein'), (1316, 'Thüringen'), (1401, 'Burgenland'), (1402, 'Kärnten'), (1403, 'Niederösterreich'), (1404, 'Oberösterreich'), (1405, 'Salzburg'), (1406, 'Steiermark'), (1407, 'Tirol'), (1408, 'Vorarlberg'), (1409, 'Wien'), (1501, 'Andalucía'), (1502, 'Aragón'), (1503, 'Asturias'), (1504, 'Baleares'), (1505, 'Canarias'), (1506, 'Cantabria'), (1507, 'Castilla-La Mancha'), (1508, 'Castilla y León'), (1509, 'Cataluña'), (1510, 'Extremadura'), (1511, 'Galicia'), (1512, 'La Rioja'), (1513, 'Madrid'), (1514, 'Murcia'), (1515, 'Navarra'), (1516, 'País Vasco'), (1517, 'Valencia'), (1601, 'Alentejo'), (1602, 'Algarve'), (1603, 'Açores'), (1604, 'Centro'), (1605, 'Lisboa'), (1606, 'Madeira'), (1607, 'Norte'), (1701, 'Jihočeský'), (1702, 'Jihomoravský'), (1703, 'Karlovarský'), (1704, 'Královéhradecký'), (1705, 'Liberecký'), (1706, 'Moravskoslezský'), (1707, 'Olomoucký'), (1708, 'Pardubický'), (1709, 'Plzeňský'), (1710, 'Praha'), (1711, 'Středočeský'), (1712, 'Ústecký'), (1713, 'Vysočina'), (1714, 'Zlínský'), (1801, 'Banská Bystrica'), (1802, 'Bratislava'), (1803, 'Košice'), (1804, 'Nitra'), (1805, 'Prešov'), (1806, 'Trenčín'), (1807, 'Trnava'), (1808, 'Žilina'), (1901, 'Dolnośląskie'), (1902, 'Kujawsko-Pomorskie'), (1903, 'Lubelskie'), (1904, 'Lubuskie'), (1905, 'Łódzkie'), (1906, 'Małopolska'), (1907, 'Mazowieckie'), (1908, 'Opolskie'), (1909, 'Podkarpackie'), (1910, 'Podlaskie'), (1911, 'Pomorskie'), (1912, 'Śląskie'), (1913, 'Świętokrzyskie'), (1914, 'Warmińsko-Mazurskie'), (1915, 'Wielkopolskie'), (1916, 'Zachodniopomorskie'), (2001, 'Berat'), (2002, 'Dibër'), (2003, 'Durrës'), (2004, 'Elbasan'), (2005, 'Fier'), (2006, 'Gjirokastër'), (2007, 'Korçë'), (2008, 'Kukës'), (2009, 'Lezhë'), (2010, 'Shkodër'), (2011, 'Tiranë'), (2012, 'Vlorë'), (2101, 'Federation of Bosnia and Herzegovina'), (2102, 'Republika Srpska'), (2103, 'Brčko District'), (2201, 'Blagoevgrad'), (2202, 'Burgas'), (2203, 'Dobrich'), (2204, 'Gabrovo'), (2205, 'Haskovo'), (2206, 'Kardzhali'), (2207, 'Kyustendil'), (2208, 'Lovech'), (2209, 'Montana'), (2210, 'Pazardzhik'), (2211, 'Pernik'), (2212, 'Pleven'), (2213, 'Plovdiv'), (2214, 'Razgrad'), (2215, 'Ruse'), (2216, 'Shumen'), (2217, 'Silistra'), (2218, 'Sliven'), (2219, 'Smolyan'), (2220, 'Sofia City'), (2221, 'Sofia Province'), (2222, 'Stara Zagora'), (2223, 'Targovishte'), (2224, 'Varna'), (2225, 'Veliko Tarnovo'), (2226, 'Vidin'), (2227, 'Vratsa'), (2228, 'Yambol'), (2301, 'Bjelovar-Bilogora'), (2302, 'Brod-Posavina'), (2303, 'Dubrovnik-Neretva'), (2304, 'Istria'), (2305, 'Karlovac'), (2306, 'Koprivnica-Križevci'), (2307, 'Krapina-Zagorje'), (2308, 'Lika-Senj'), (2309, 'Međimurje'), (2310, 'Osijek-Baranja'), (2311, 'Požega-Slavonia'), (2312, 'Primorje-Gorski Kotar'), (2313, 'Sisak-Moslavina'), (2314, 'Split-Dalmatia'), (2315, 'Šibenik-Knin'), (2316, 'Varaždin'), (2317, 'Virovitica-Podravina'), (2318, 'Vukovar-Srijem'), (2319, 'Zadar'), (2320, 'Zagreb County'), (2321, 'City of Zagreb'), (2401, 'Ferizaj'), (2402, 'Gjilan'), (2403, 'Gjakova'), (2404, 'Mitrovica'), (2405, 'Peja'), (2406, 'Pristina'), (2407, 'Prizren'), (2501, 'Andrijevica'), (2502, 'Bar'), (2503, 'Berane'), (2504, 'Bijelo Polje'), (2505, 'Budva'), (2506, 'Cetinje'), (2507, 'Danilovgrad'), (2508, 'Herceg Novi'), (2509, 'Kolašin'), (2510, 'Kotor'), (2511, 'Mojkovac'), (2512, 'Nikšić'), (2513, 'Petnjica'), (2514, 'Plav'), (2515, 'Pljevlja'), (2516, 'Plužine'), (2517, 'Podgorica'), (2518, 'Rožaje'), (2519, 'Šavnik'), (2520, 'Tivat'), (2521, 'Ulcinj'), (2522, 'Žabljak'), (2601, 'Veles'), (2602, 'Istočna'), (2603, 'Severozapaden'), (2604, 'Pelagonija'), (2605, 'Polog'), (2606, 'Skopje'), (2607, 'Jugoistočna'), (2608, 'Jugozapaden'), (2701, 'Alba'), (2702, 'Arad'), (2703, 'Argeș'), (2704, 'Bacău'), (2705, 'Bihor'), (2706, 'Bistrița-Năsăud'), (2707, 'Botoșani'), (2708, 'Brăila'), (2709, 'Brașov'), (2710, 'Buzău'), (2711, 'Călărași'), (2712, 'Caraș-Severin'), (2713, 'Cluj'), (2714, 'Constanța'), (2715, 'Covasna'), (2716, 'Dâmbovița'), (2717, 'Dolj'), (2718, 'Galați'), (2719, 'Giurgiu'), (2720, 'Gorj'), (2721, 'Harghita'), (2722, 'Hunedoara'), (2723, 'Ialomița'), (2724, 'Iași'), (2725, 'Ilfov'), (2726, 'Maramureș'), (2727, 'Mehedinți'), (2728, 'Mureș'), (2729, 'Neamț'), (2730, 'Olt'), (2731, 'Prahova'), (2732, 'Sălaj'), (2733, 'Satu Mare'), (2734, 'Sibiu'), (2735, 'Suceava'), (2736, 'Teleorman'), (2737, 'Timiș'), (2738, 'Tulcea'), (2739, 'Vâlcea'), (2740, 'Vaslui'), (2741, 'Vrancea'), (2801, 'Beograd'), (2802, 'Mačva'), (2803, 'Kolubara'), (2804, 'Podunavlje'), (2805, 'Braničevo'), (2806, 'Šumadija'), (2807, 'Pomoravlje'), (2808, 'Bor'), (2809, 'Zaječar'), (2810, 'Zlatibor'), (2811, 'Moravica'), (2812, 'Rasina'), (2813, 'Raška'), (2814, 'Nišava'), (2815, 'Toplica'), (2816, 'Pirot'), (2817, 'Jablanica'), (2818, 'Pčinja'), (2819, 'Kosovo'), (2820, 'Metohija'), (2901, 'Ajdovščina'), (2902, 'Beltinci'), (2903, 'Bled'), (2904, 'Bohinj'), (2905, 'Borovnica'), (2906, 'Bovec'), (2907, 'Brda'), (2908, 'Brežice'), (2909, 'Brezovica'), (2910, 'Celje'), (2911, 'Cerkno'), (2912, 'Cerknica'), (2913, 'Črna na Koroškem'), (2914, 'Črnomelj'), (2915, 'Divača'), (2916, 'Dobrna'), (2917, 'Dobrovnik'), (2918, 'Domžale'), (2919, 'Dravograd'), (2920, 'Gornja Radgona'), (2921, 'Gornji Grad'), (2922, 'Gornji Petrovci'), (2923, 'Grad'), (2924, 'Grosuplje'), (2925, 'Hrpelje-Kozina'), (2926, 'Idrija'), (2927, 'Ig'), (2928, 'Ilirska Bistrica'), (2929, 'Ivančna Gorica'), (2930, 'Izola'), (2931, 'Jesenice'), (2932, 'Jezersko'), (2933, 'Juršinci'), (2934, 'Kamnik'), (2935, 'Kočevje'), (2936, 'Kobarid'), (2937, 'Komenda'), (2938, 'Koper'), (2939, 'Kozje'), (2940, 'Kranj'), (2941, 'Kranjska Gora'), (2942, 'Križevci'), (2943, 'Kuzma'), (2944, 'Laško'), (2945, 'Lenart'), (2946, 'Lendava'), (2947, 'Litija'), (2948, 'Ljubljana'), (2949, 'Ljutomer'), (2950, 'Log-Dragomer'), (2951, 'Logatec'), (2952, 'Loška Dolina'), (2953, 'Loški Potok'), (2954, 'Lovrenc na Pohorju'), (2955, 'Luče'), (2956, 'Makole'), (2957, 'Maribor'), (2958, 'Markovci'), (2959, 'Miren-Kostanjevica'), (2960, 'Mirna'), (2961, 'Mirna Peč'), (2962, 'Mislinja'), (2963, 'Moravče'), (2964, 'Moravske Toplice'), (2965, 'Mozirje'), (2966, 'Murska Sobota'), (2967, 'Naklo'), (2968, 'Nazarje'), (2969, 'Nova Gorica'), (2970, 'Novo Mesto'), (2971, 'Odranci'), (2972, 'Ormož'), (2973, 'Osilnica'), (2974, 'Pesnica'), (2975, 'Pivka'), (2976, 'Podčetrtek'), (2977, 'Podlehnik'), (2978, 'Podvelka'), (2979, 'Polzela'), (2980, 'Postojna'), (2981, 'Prebold'), (2982, 'Preddvor'), (2983, 'Prevalje'), (2984, 'Ptuj'), (2985, 'Puconci'), (2986, 'Rače-Fram'), (2987, 'Radeče'), (2988, 'Radenci'), (2989, 'Radlje ob Dravi'), (2990, 'Radovljica'), (2991, 'Ravne na Koroškem'), (2992, 'Ribnica'), (2993, 'Ribnica na Pohorju'), (2994, 'Rogašovci'), (2995, 'Rogaška Slatina'), (2996, 'Rogatec'), (2997, 'Šalovci'), (2998, 'Šempeter-Vrtojba'), (2999, 'Šenčur'), (3000, 'Šentilj'), (3001, 'Šentjernej'), (3002, 'Šentjur'), (3003, 'Šentrupert'), (3004, 'Sevnica'), (3005, 'Sežana'), (3006, 'Slovenska Bistrica'), (3007, 'Slovenske Konjice'), (3008, 'Šmarje'), (3009, 'Šmarje pri Jelšah'), (3010, 'Šmihel'), (3011, 'Sodražica'), (3012, 'Solčava'), (3013, 'Starše'), (3014, 'Straža'), (3015, 'Sveti Andraž v Slovenskih Goricah'), (3016, 'Sveti Jurij'), (3017, 'Sveta Ana'), (3018, 'Sveta Trojica v Slovenskih Goricah'), (3019, 'Sveti Tomaž'), (3020, 'Škofljica'), (3021, 'Škofja Loka'), (3022, 'Škocjan'), (3023, 'Šmartno ob Paki'), (3024, 'Šoštanj'), (3025, 'Štore'), (3026, 'Tolmin'), (3027, 'Trbovlje'), (3028, 'Trebnje'), (3029, 'Tržič'), (3030, 'Turnišče'), (3031, 'Velenje'), (3032, 'Velika Polana'), (3033, 'Velike Lašče'), (3034, 'Veržej'), (3035, 'Videm'), (3036, 'Vipava'), (3037, 'Vitanje'), (3038, 'Vodice'), (3039, 'Vojnik'), (3040, 'Vransko'), (3041, 'Vrhnika'), (3042, 'Zagorje ob Savi'), (3043, 'Zavrče'), (3044, 'Železniki'), (3045, 'Žiri'), (3046, 'Žitara Vas'), (3047, 'Žužemberk')], help_text='Region(s) through which the route passes.', verbose_name='Regions')),
                ('distance', models.FloatField(help_text='Distance of the route in kilometers.', verbose_name='Distance (km)')),
                ('ascents', models.FloatField(help_text='Total ascents in meters.', verbose_name='Ascents (m)')),
                ('descents', models.FloatField(help_text='Total descents in meters.', verbose_name='Descents (m)')),
                ('min_elevation', models.FloatField(help_text='Minimum elevation in meters.', verbose_name='Minimum Elevation (m)')),
                ('max_elevation', models.FloatField(help_text='Maximum elevation in meters.', verbose_name='Maximum Elevation (m)')),
                ('roads_type', models.IntegerField(choices=[(1, 'Administrator'), (2, 'Author'), (3, 'User')], help_text='Type of roads on the route.', verbose_name='Roads Type')),
                ('cards', models.ManyToManyField(help_text='Cards related to the route.', to='achievement.cardmodel', verbose_name='Cards')),
                ('end_point', models.ForeignKey(help_text='Ending point of the route.', on_delete=django.db.models.deletion.CASCADE, related_name='route_end', to='hiking.routemodel', verbose_name='End Point')),
                ('start_point', models.ForeignKey(help_text='Starting point of the route.', on_delete=django.db.models.deletion.CASCADE, related_name='route_start', to='hiking.routemodel', verbose_name='Start Point')),
            ],
            options={
                'verbose_name': 'Route',
                'verbose_name_plural': 'Routes',
                'ordering': ['-created'],
                'permissions': (('read_write', 'Read and write access.'), ('read_only', 'Read only access')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='MultiDayTrialTrialModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(help_text='Order of the trial within the multi day trial.', verbose_name='Order')),
                ('multi_day_trial', models.ForeignKey(help_text='Multi day trial that includes this trial.', on_delete=django.db.models.deletion.CASCADE, to='hiking.multidaytrialmodel', verbose_name='Multi day Trial')),
                ('trial', models.ForeignKey(help_text='Trial included in the multi day trial.', on_delete=django.db.models.deletion.CASCADE, to='hiking.trialmodel', verbose_name='Trial')),
            ],
        ),
        migrations.AddField(
            model_name='multidaytrialmodel',
            name='trials',
            field=models.ManyToManyField(help_text='Trials that are part of the multi day trial.', through='hiking.MultiDayTrialTrialModel', to='hiking.trialmodel', verbose_name='Trials'),
        ),
        migrations.CreateModel(
            name='TrialRouteModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route', models.ForeignKey(help_text='Route included in the trial.', on_delete=django.db.models.deletion.CASCADE, to='hiking.routemodel', verbose_name='Route')),
                ('trial', models.ForeignKey(help_text='Trial that includes this route.', on_delete=django.db.models.deletion.CASCADE, to='hiking.trialmodel', verbose_name='Trial')),
            ],
        ),
        migrations.AddField(
            model_name='trialmodel',
            name='routes',
            field=models.ManyToManyField(help_text='Routes that are part of the trial.', through='hiking.TrialRouteModel', to='hiking.routemodel', verbose_name='Routes'),
        ),
    ]
